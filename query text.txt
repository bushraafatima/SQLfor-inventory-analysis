CREATE TABLE branddata
(
    brand_id INT PRIMARY KEY,
    brand_name VARCHAR(255)
);


CREATE TABLE vendorsdata 
(
    vendor_id INT PRIMARY KEY,
    vendor_name VARCHAR(255),
    vendor_number VARCHAR(50)
    volume INT 

);

Create inventory table
CREATE TABLE inventorydata 
(
    item_id VARCHAR(55) PRIMARY KEY,
    brand_id INT,
    vendor_id INT,
    volume INT,
    item_name VARCHAR(255),
    FOREIGN KEY (brand_id) REFERENCES brand(brand_id)
);
   

CREATE TABLE salesdata
 (
    sales_id INT PRIMARY KEY,
    item_id VARCHAR(55),
    brand_id INT,
    volume INT,
    vendor_id INT,
    sales_quantity INT,
    sales_price DECIMAL(10, 2),
    sales_date DATE,
    FOREIGN KEY (item_id) REFERENCES inventory(item_id),
    FOREIGN KEY (brand_id) REFERENCES brand(brand_id)
    
);

1.Total Volume of Inventory by Brand:

SELECT 
    b.brand_id,
    b.brand_name,
    SUM(i.volume) AS total_inventory_volume
FROM 
    branddata b
LEFT JOIN 
    inventorydata i ON b.brand_id = i.brand_id
GROUP BY 
    b.brand_id, b.brand_name
ORDER BY 
    total_inventory_volume DESC;

2.Total Sales Volume by Brand:
SELECT 
    b.brand_id,
    b.brand_name,
    SUM(s.sales_quantity) AS total_sales_volume
FROM 
    branddata b
LEFT JOIN 
    salesdata s ON b.brand_id = s.brand_id
GROUP BY 
    b.brand_id, b.brand_name
ORDER BY 
    total_sales_volume DESC;

3.Top Selling Items by Volume:
SELECT 
    i.item_id,
    i.item_name,
    SUM(s.sales_quantity) AS total_sales_volume
FROM 
    inventorydata i
JOIN 
    salesdata s ON i.item_id = s.item_id
GROUP BY 
    i.item_id, i.item_name
ORDER BY 
    total_sales_volume DESC
LIMIT 20;

4.Total Revenue by Brand:
SELECT 
    b.brand_id,
    b.brand_name,
    SUM(s.sales_quantity * s.sales_price) AS total_revenue
FROM 
    branddata b
LEFT JOIN 
    salesdata s ON b.brand_id = s.brand_id
GROUP BY 
    b.brand_id, b.brand_name
ORDER BY 
    total_revenue DESC;
5.Find the Brand with the Lowest Inventory Volume:
 SELECT
    b.brand_id,
    b.brand_name,
    MIN(i.volume) AS lowest_inventory_volume
FROM 
    branddata b
JOIN 
    inventorydata i ON b.brand_id = i.brand_id
GROUP BY 
    b.brand_id, b.brand_name
ORDER BY 
    lowest_inventory_volume;


6. to identify low in stock products 
To identify low-performing brands based on low sales quantity,
SELECT 
    b.brand_id,
    b.brand_name,
    SUM(s.sales_quantity) AS total_sales_quantity
FROM 
    brand b
LEFT JOIN 
    sales s ON b.brand_id = s.brand_id
GROUP BY 
    b.brand_id, b.brand_name
HAVING 
    SUM(s.sales_quantity) < 10
ORDER BY 
    total_sales_quantity;

7. To calculate the product turnover ratio for inventory analysis
SELECT 
    i.item_id,
    i.item_name,
    SUM(s.sales_quantity) AS total_sales_quantity,
    AVG(i.volume) AS average_inventory_quantity,
    (SUM(s.sales_quantity) / AVG(i.volume)) AS turnover_ratio
FROM 
    inventorydata i
JOIN 
    salesdata s ON i.item_id = s.item_id
GROUP BY 
    i.item_id, i.item_name
ORDER BY 
    turnover_ratio DESC;

8. Find the Total Sales Revenue for Each Quarter:
SELECT 
    TO_CHAR(s.sales_date, 'YYYY') AS year,
    TO_CHAR(s.sales_date, 'Q') AS quarter,
    SUM(s.sales_quantity * s.sales_price) AS total_sales_revenue
FROM 
    salesdata s
GROUP BY 
    year, quarter
ORDER BY 
    year, quarter;

9.Find the Most Recent Sales Date for Each Brand:
SELECT 
    b.brand_id,
    b.brand_name,
    MAX(s.sales_date) AS most_recent_sales_date
FROM 
    branddata b
LEFT JOIN 
    salesdata s ON b.brand_id = s.brand_id
GROUP BY 
    b.brand_id, b.brand_name
ORDER BY 
    most_recent_sales_date DESC;
10.Find the Average Sales Price for Each Month in the Last Year:
SELECT 
    TO_CHAR(s.sales_date, 'YYYY-MM') AS month,
    AVG(s.sales_price) AS average_sales_price
FROM 
    salesdata s
WHERE 
    s.sales_date >= CURRENT_DATE - INTERVAL '1 year'
GROUP BY 
    month
ORDER BY 
    month;

11.Total Sales Volume by Product and Month:

SELECT 
   i.item_id,
    i.item_name,
    DATE_TRUNC('month', s.sales_date) AS sales_month,
    SUM(s.sales_quantity) AS total_sales_volume
FROM 
    inventorydata i
JOIN 
    salesdata s ON i.item_id = s.item_id
GROUP BY 
    i.item_id, i.item_name, DATE_TRUNC('month', s.sales_date)
ORDER BY 
    sales_month, total_sales_volume DESC;
